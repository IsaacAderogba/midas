### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthUser {
  avatarURL: String
  firstName: String!
  isVerified: Boolean!
  lastName: String!
  token: String!
  userId: ID!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createWorkspace(newWorkspaceInput: NewWorkspaceInput): Workspace
  createWorkspaceUser(newWorkspaceUserInput: NewWorkspaceUserInput): WorkspaceUser
  deleteUser: Boolean!
  deleteWorkspace(workspaceId: ID!): Boolean!
  deleteWorkspaceUser(where: WorkspaceUserWhere): Boolean!
  registerUser(registerInput: RegisterInput): AuthUser
  updateUser(userInput: UserInput): User
  updateWorkspace(workspaceId: ID!, workspaceInput: WorkspaceInput): Workspace
  updateWorkspaceUser(where: WorkspaceUserWhere, workspaceUserInput: WorkspaceUserInput): WorkspaceUser
}

input NewWorkspaceInput {
  name: String
  photoURL: String
  url: String
}

input NewWorkspaceUserInput {
  role: WorkspaceUserRoles!
  userId: Int!
  workspaceId: Int!
}

type Query {
  loginUser(loginInput: LoginInput): AuthUser
  user: User
  workspace(workspaceId: ID!): Workspace
  workspaces(userId: ID!): [Workspace!]!
  workspaceUser(where: WorkspaceUserWhere): WorkspaceUser
}

input RegisterInput {
  avatarURL: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type User {
  avatarURL: String
  email: String!
  firstName: String!
  id: ID!
  isVerified: Boolean!
  lastName: String!
  photoId: Boolean
  workspaces: [Workspace!]!
}

input UserInput {
  avatarURL: String
  firstName: String
  isVerified: String
  lastName: String
  photoId: String
}

type Workspace {
  id: ID!
  name: String!
  photoId: String
  photoURL: String
  seats: Int!
  trialStartedAt: String
  url: String!
}

input WorkspaceInput {
  name: String
  photoURL: String
}

type WorkspaceUser {
  lastSeen: String
  role: WorkspaceUserRoles!
  status: WorkspaceUserStatus!
  userId: Int!
  workspaceId: Int!
}

input WorkspaceUserInput {
  role: WorkspaceUserRoles
  status: WorkspaceUserStatus
}

enum WorkspaceUserRoles {
  admin
  editor
  owner
  viewer
}

enum WorkspaceUserStatus {
  active
}

input WorkspaceUserWhere {
  userId: Int
  workspaceId: Int
}
