### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthUser {
  avatarURL: String
  firstName: String!
  isVerified: Boolean!
  lastName: String!
  token: String!
  user: User!
  userId: ID!
}

type CanvasPayload {
  pointerCoordX: Int
  pointerCoordY: Int
  workspaceUserId: String!
}

input CanvasPayloadInput {
  pointerCoordX: Int
  pointerCoordY: Int
  workspaceUserId: String!
}

enum CanvasScene {
  CLIENT_CONNECT
  CLIENT_DISCONNECT
  MOUSE_LOCATION
  SCENE_UPDATE
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProject(newProjectInput: NewProjectInput!): Project
  createWorkspace(newWorkspaceInput: NewWorkspaceInput): Workspace
  createWorkspaceUser(newWorkspaceUserInput: NewWorkspaceUserInput): WorkspaceUser
  deleteProject(projectId: ID!): Project
  deleteUser: Boolean!
  deleteWorkspace: Boolean!
  deleteWorkspaceUser(where: WorkspaceUserWhere): Boolean!
  loginUser(loginInput: LoginInput): AuthUser!
  registerUser(registerInput: RegisterInput): AuthUser!
  updateProject(canvasPayloadInput: CanvasPayloadInput, projectInput: ProjectInput!, where: ProjectWhere!): Project
  updateUser(userInput: UserInput): User
  updateWorkspace(workspaceInput: WorkspaceInput): Workspace
  updateWorkspaceUser(where: WorkspaceUserWhere, workspaceUserInput: WorkspaceUserInput): WorkspaceUser
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

input NewProjectInput {
  inviteSharePrivileges: ProjectInviteSharePrivileges
  inviteShareStatus: ProjectInviteShareStatus
  thumbnailPhotoID: String
  thumbnailPhotoURL: String
  title: String!
  workspaceUserId: String!
}

input NewWorkspaceInput {
  name: String
  photoURL: String
  url: String
}

input NewWorkspaceUserInput {
  role: WorkspaceUserRoles!
  userId: Int!
  workspaceId: Int!
}

type Project {
  createdAt: String!
  elements: String
  id: ID!
  inviteSharePrivileges: ProjectInviteSharePrivileges!
  inviteShareStatus: ProjectInviteShareStatus!
  thumbnailPhotoID: String
  thumbnailPhotoURL: String
  title: String!
  updatedAt: String!
  workspace: Workspace!
  workspaceId: ID!
  workspaceUser: WorkspaceUser!
  workspaceUserId: ID!
}

input ProjectInput {
  elements: String
  inviteSharePrivileges: ProjectInviteSharePrivileges
  inviteShareStatus: ProjectInviteShareStatus
  thumbnailPhotoID: String
  thumbnailPhotoURL: String
  title: String
  workspaceUserId: String
}

enum ProjectInviteSharePrivileges {
  can_view
}

enum ProjectInviteShareStatus {
  people_invited
}

type ProjectSubscriptionPayload {
  canvasPayload: CanvasPayload
  canvasScene: CanvasScene
  data: Project!
  mutation: MutationType!
  updatedFields: [String!]!
}

input ProjectWhere {
  id: ID
  workspaceId: ID
  workspaceUserId: ID
}

type Query {
  project(where: ProjectWhere!): Project
  projects(where: ProjectWhere): [Project!]!
  user: User
  workspace: Workspace
  workspaces: [Workspace!]!
  workspaceUser(where: WorkspaceUserWhere): WorkspaceUser
  workspaceUsers: [WorkspaceUser!]
}

input RegisterInput {
  avatarURL: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Subscription {
  project(where: ProjectWhere!): ProjectSubscriptionPayload!
  projects: ProjectSubscriptionPayload!
}

type User {
  avatarURL: String
  email: String!
  firstName: String!
  id: ID!
  isVerified: Boolean!
  lastName: String!
  photoId: Boolean
  workspaces: [Workspace!]
}

input UserInput {
  avatarURL: String
  firstName: String
  isVerified: String
  lastName: String
  photoId: String
}

type Workspace {
  id: ID!
  name: String!
  photoId: String
  photoURL: String
  seats: Int!
  trialStartedAt: String
  url: String!
  workspaceUsers: [WorkspaceUser!]!
}

input WorkspaceInput {
  name: String
  photoURL: String
}

type WorkspaceUser {
  id: ID!
  lastSeen: String
  role: WorkspaceUserRoles!
  status: WorkspaceUserStatus!
  user: User!
  userId: ID!
  workspace: Workspace!
  workspaceId: ID!
}

input WorkspaceUserInput {
  role: WorkspaceUserRoles
  status: WorkspaceUserStatus
}

enum WorkspaceUserRoles {
  admin
  editor
  owner
  viewer
}

enum WorkspaceUserStatus {
  active
}

input WorkspaceUserWhere {
  userId: ID
}
